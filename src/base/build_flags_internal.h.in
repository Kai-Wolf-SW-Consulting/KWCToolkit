// Copyright (c) 2021, Kai Wolf - SW Consulting. All rights reserved.
// For the licensing terms see LICENSE file in the root directory. For the
// list of contributors see the AUTHORS file in the same directory.

#ifndef KWCTOOLKIT_BASE_BUILD_FLAGS_INTERNAL_H_
#define KWCTOOLKIT_BASE_BUILD_FLAGS_INTERNAL_H_

// The following macros concatenate two preprocessor args using the common ## indirectly as
// ## used directly prevent macro parameters from being expanded
#define BUILD_FLAG_DO_CONCAT(a, b) a ## b
#define BUILD_FLAG_CONCAT(a, b) BUILD_FLAG_DO_CONCAT(a, b)

// Common definition for build flags
// The following macro construct ensures that (internal) build flags are recognized as such
// and also throw compile-time errors in case the given flag is not defined. We can also use
// the defined value in a given expression such as:
//
//     const char foobar[] = BUILD_FLAG(FOO_BAR);
//
// This header gets generated by the build system generator (CMake or Bazel) and should not be
// edited manually
#define BUILD_FLAG(flag) (BUILD_FLAG_CONCAT(BUILD_FLAG_INTERNAL_, flag)())

#define BUILD_FLAG_INTERNAL_ENABLE_ASSERTS() (${ENABLE_ASSERTS})


#endif // KWCTOOLKIT_BASE_BUILD_FLAGS_INTERNAL_H_